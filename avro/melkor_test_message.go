// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     test.avsc
 */

package avro

import (
	"io"

	"github.com/actgardner/gogen-avro/compiler"
	"github.com/actgardner/gogen-avro/container"
	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
)

type MelkorTestMessage struct {
	Message string
	Nick    string
}

func NewMelkorTestMessageWriter(writer io.Writer, codec container.Codec, recordsPerBlock int64) (*container.Writer, error) {
	str := &MelkorTestMessage{}
	return container.NewWriter(writer, codec, recordsPerBlock, str.Schema())
}

func DeserializeMelkorTestMessage(r io.Reader) (*MelkorTestMessage, error) {
	t := NewMelkorTestMessage()

	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	return t, err
}

func NewMelkorTestMessage() *MelkorTestMessage {
	return &MelkorTestMessage{}
}

func (r *MelkorTestMessage) Schema() string {
	return "{\"fields\":[{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"nick\",\"type\":\"string\"}],\"name\":\"MelkorTestMessage\",\"type\":\"record\"}"
}

func (r *MelkorTestMessage) SchemaName() string {
	return "MelkorTestMessage"
}

func (r *MelkorTestMessage) Serialize(w io.Writer) error {
	return writeMelkorTestMessage(r, w)
}

func (_ *MelkorTestMessage) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *MelkorTestMessage) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *MelkorTestMessage) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *MelkorTestMessage) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *MelkorTestMessage) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *MelkorTestMessage) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *MelkorTestMessage) SetString(v string)   { panic("Unsupported operation") }
func (_ *MelkorTestMessage) SetUnionElem(v int64) { panic("Unsupported operation") }
func (r *MelkorTestMessage) Get(i int) types.Field {
	switch i {
	case 0:
		return (*types.String)(&r.Message)
	case 1:
		return (*types.String)(&r.Nick)

	}
	panic("Unknown field index")
}
func (r *MelkorTestMessage) SetDefault(i int) {
	switch i {

	}
	panic("Unknown field index")
}
func (_ *MelkorTestMessage) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *MelkorTestMessage) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *MelkorTestMessage) Finalize()                        {}

type MelkorTestMessageReader struct {
	r io.Reader
	p *vm.Program
}

func NewMelkorTestMessageReader(r io.Reader) (*MelkorTestMessageReader, error) {
	containerReader, err := container.NewReader(r)
	if err != nil {
		return nil, err
	}

	t := NewMelkorTestMessage()
	deser, err := compiler.CompileSchemaBytes([]byte(containerReader.AvroContainerSchema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	return &MelkorTestMessageReader{
		r: containerReader,
		p: deser,
	}, nil
}

func (r *MelkorTestMessageReader) Read() (*MelkorTestMessage, error) {
	t := NewMelkorTestMessage()
	err := vm.Eval(r.r, r.p, t)
	return t, err
}
